name: Validate Documentation

on:
  push:
    branches-ignore:
      - main  # Main branch is already covered by the deployment workflow
  pull_request:
    branches: 
      - '*'  # Run on all pull requests

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      docs_ready: ${{ steps.setup_docs.outputs.result }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Setup documentation files
        id: setup_docs
        run: |
          mkdir -p docs/stylesheets
          # Only copy files if they don't exist in docs/ already
          if [ ! -f docs/index.md ]; then
            cp README.md docs/index.md
          fi
          for file in security-services.md devops-services.md cloud-migration.md digital-transformation.md; do
            if [ ! -f docs/$file ] && [ -f "$file" ]; then
              cp $file docs/
            fi
          done
          # Remove the filepath comments and fix navigation
          for file in docs/*.md; do
            if [ -f "$file" ] && [ "$(head -n 1 $file | grep 'filepath:')" ]; then
              sed -i '1d' "$file"
            fi
            if [ -f "$file" ]; then
              sed -i 's|\[Back to Service Portfolio\](README.md)|[Back to Home](index.md)|g' "$file"
            fi
          done
          # Remove index.md entries that aren't needed
          if [ -f "docs/README.md" ]; then
            rm -f docs/README.md
          fi
          echo "::set-output name=result::true"

  validate-and-notify:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs-material
          
      - name: Check for broken links
        id: validation
        run: |
          echo "Checking for broken internal links and image references..."
          mkdocs build --strict
          echo "✅ Documentation validation passed"
          
      # Only add PR comment if this is a pull request  
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `## Documentation Validation Results
            
            ✅ Documentation validation completed successfully!
            
            The following checks passed:
            - MkDocs build with strict mode
            - Internal link validation
            - Image reference validation
            
            You can preview these changes locally by running:
            \`\`\`bash
            mkdocs serve
            \`\`\`
            
            **This PR is ready for review and can be merged.**
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      # Send notification using the external script  
      - name: Send Google Chat notification
        env:
          ENCODED_WEBHOOK_URL: ${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}
        run: |
          if [ -z "$ENCODED_WEBHOOK_URL" ]; then
            echo "❌ GOOGLE_CHAT_WEBHOOK_URL secret is not set. Skipping notification."
            exit 0
          fi

          WEBHOOK_URL=$(echo "$ENCODED_WEBHOOK_URL" | base64 -d)

          if [ -z "$WEBHOOK_URL" ]; then
            echo "❌ Failed to decode the webhook URL."
            exit 0
          fi
          
          # Make sure the script is executable
          chmod +x ./scripts/send-validation-notification.sh
          
          # For PR events, include PR information
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            ./scripts/send-validation-notification.sh \
              "$WEBHOOK_URL" \
              "${{ github.repository }}" \
              "${{ github.run_id }}" \
              "${{ github.event.pull_request.number }}" \
              "${{ github.event.pull_request.title }}" \
              "${{ github.event.pull_request.user.login }}"
          else
            # For push events, don't include PR info
            ./scripts/send-validation-notification.sh \
              "$WEBHOOK_URL" \
              "${{ github.repository }}" \
              "${{ github.run_id }}"
          fi