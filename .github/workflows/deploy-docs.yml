name: Deploy Documentation

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs-material

      # Ensure gh-pages branch exists
      - name: Create gh-pages branch if needed
        run: |
          if ! git ls-remote --heads origin gh-pages; then
            git checkout -b gh-pages
            git push -u origin gh-pages
            git checkout -
            echo "Created gh-pages branch"
          else
            echo "gh-pages branch already exists"
          fi

      - name: Setup documentation files
        run: |
          mkdir -p docs/stylesheets
          # Only copy files if they don't exist in docs/ already
          if [ ! -f docs/index.md ]; then
            cp README.md docs/index.md
          fi
          for file in security-services.md devops-services.md cloud-migration.md digital-transformation.md; do
            if [ ! -f docs/$file ]; then
              cp $file docs/
            fi
          done
          # Remove the filepath comments and fix navigation
          for file in docs/*.md; do
            if [ "$(head -n 1 $file | grep 'filepath:')" ]; then
              sed -i '1d' "$file"
            fi
            sed -i 's|\[Back to Service Portfolio\](README.md)|[Back to Home](index.md)|g' "$file"
          done
          # Remove index.md entries that aren't needed
          rm -f docs/README.md

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Build documentation
        run: mkdocs build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

      # Alternative deployment method that pushes directly to gh-pages
      - name: Deploy to gh-pages branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          force_orphan: true  # Creates a fresh gh-pages branch with only the latest content

      # Try standard GitHub Pages deployment too
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3
        continue-on-error: true

      - name: Check deployment status
        run: |
          if [ "${{ steps.deployment.outcome }}" == "success" ]; then
            echo "✅ Standard GitHub Pages deployment succeeded"
          else
            echo "⚠️ Standard GitHub Pages deployment failed, but content was deployed to gh-pages branch"
            echo "Your site should still be accessible at GitHub Pages URL"
          fi

      - name: Verify deployment exists
        run: |
          TIMEOUT=300
          INTERVAL=10
          EXPECTED_URL="https://zsoftly.github.io/zsoftly-services/"
          echo "Verifying deployment at $EXPECTED_URL"
          START_TIME=$(date +%s)
          while :; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$EXPECTED_URL")
            if [ "$STATUS" = "200" ]; then
              echo "✅ Deployment verified successfully (HTTP $STATUS)"
              exit 0
            fi
            CURRENT_TIME=$(date +%s)
            ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
            if [ $ELAPSED_TIME -gt $TIMEOUT ]; then
              echo "❌ Deployment verification timed out after $TIMEOUT seconds (HTTP $STATUS)"
              echo "This may be normal for the first deployment - please check the URL manually in a few minutes"
              exit 0  # Exit with success to prevent workflow failure
            fi
            echo "Waiting for deployment to become available (HTTP $STATUS)..."
            sleep $INTERVAL
          done

      - name: Send Google Chat notification on success
        if: success() && github.ref == 'refs/heads/main'
        run: |
          if [ -n "${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}" ]; then
            # Test the webhook first
            TEST_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
            -H "Content-Type: application/json" \
            -d "{\"text\": \"Webhook test\"}" \
            ${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }})
            
            if [ "$TEST_RESPONSE" = "200" ]; then
              curl -X POST \
              -H "Content-Type: application/json" \
              -d "{\"text\": \"✅ **Documentation Deployment Successful**\\n\\nThe ZSoftly documentation has been successfully deployed to GitHub Pages.\\n\\n**Repository**: ${{ github.repository }}\\n**URL**: https://zsoftly.github.io/zsoftly-services/\\n**Action**: [View workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\"}" \
              ${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}
              echo "✅ Google Chat notification sent"
            else
              echo "❌ Google Chat webhook test failed with status $TEST_RESPONSE"
            fi
          else
            echo "ℹ️ No Google Chat webhook URL provided, skipping notification"
          fi