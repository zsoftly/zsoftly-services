name: Deploy Documentation

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  issues: write
  pull-requests: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs-material
          # Removed problematic mkdocs-minify-plugin
          
      - name: Setup documentation files
        id: setup_docs
        run: |
          mkdir -p docs/stylesheets
          # Only copy files if they don't exist in docs/ already
          if [ ! -f docs/index.md ]; then
            cp README.md docs/index.md
          fi
          for file in security-services.md devops-services.md cloud-migration.md digital-transformation.md; do
            if [ ! -f docs/$file ]; then
              cp $file docs/
            fi
          done
          # Remove the filepath comments and fix navigation
          for file in docs/*.md; do
            if [ "$(head -n 1 $file | grep 'filepath:')" ]; then
              sed -i '1d' "$file"
            fi
            sed -i 's|\[Back to Service Portfolio\](README.md)|[Back to Home](index.md)|g' "$file"
          done
          # Remove index.md entries that aren't needed
          rm -f docs/README.md
          
      - name: Build documentation
        run: mkdocs build
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./site
          
  prepare-deployment:
    environment:
      name: staging
      url: ${{ steps.preparation.outputs.preview_url }}
    runs-on: ubuntu-latest
    needs: build
    outputs:
      deployment_ready: ${{ steps.preparation.outputs.ready }}
    steps:
      - name: Prepare for deployment
        id: preparation
        run: |
          echo "Preparing documentation for deployment"
          echo "::set-output name=ready::true"
          echo "::set-output name=preview_url::https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
      - name: Notify preparation complete
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number || null,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üîÑ Documentation build complete and ready for manual deployment. Click "Review deployments" on the [workflow run page](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) to proceed with deployment.'
            })
  
  deploy:
    name: Deploy to GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: prepare-deployment
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
        
      - name: Verify deployment
        run: |
          TIMEOUT=300
          INTERVAL=10
          URL="${{ steps.deployment.outputs.page_url }}"
          echo "Verifying deployment at $URL"
          START_TIME=$(date +%s)
          while :; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
            if [ "$STATUS" = "200" ]; then
              echo "‚úÖ Deployment verified successfully (HTTP $STATUS)"
              exit 0
            fi
            CURRENT_TIME=$(date +%s)
            ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
            if [ $ELAPSED_TIME -gt $TIMEOUT ]; then
              echo "‚ùå Deployment verification timed out after $TIMEOUT seconds (HTTP $STATUS)"
              exit 1
            fi
            echo "Waiting for deployment to become available (HTTP $STATUS)..."
            sleep $INTERVAL
          done
        
      - name: Send notification on success
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number || null,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚úÖ Documentation successfully deployed to GitHub Pages: ${{ steps.deployment.outputs.page_url }}'
            })
      
      - name: Send notification on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number || null,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚ö†Ô∏è Documentation deployment failed. Please check the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.'
            })
