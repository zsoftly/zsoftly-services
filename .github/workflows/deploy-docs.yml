name: Deploy Documentation

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs-material mkdocs-glightbox mkdocs-minify-plugin

      # Ensure gh-pages branch exists
      - name: Create gh-pages branch if needed
        run: |
          if ! git ls-remote --heads origin gh-pages; then
            git checkout -b gh-pages
            git push -u origin gh-pages
            git checkout -
            echo "Created gh-pages branch"
          else
            echo "gh-pages branch already exists"
          fi

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Build documentation
        run: mkdocs build
        
      - name: Debug site structure
        run: |
          echo "Site directory contents:"
          ls -la ./site
          echo "Top-level files:"
          find ./site -maxdepth 1 -type f -name "*.html" | sort
          echo "Directory structure:"
          find ./site -type d | sort

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

      # Deploy to gh-pages branch
      - name: Deploy to gh-pages branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          force_orphan: true

      # Standard GitHub Pages deployment
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3
        continue-on-error: true

      - name: Check deployment status
        run: |
          if [ "${{ steps.deployment.outcome }}" == "success" ]; then
            echo "✅ Standard GitHub Pages deployment succeeded"
          else
            echo "⚠️ Standard GitHub Pages deployment failed, but content was deployed to gh-pages branch"
            echo "Your site should still be accessible at GitHub Pages URL"
          fi

      - name: Verify deployment exists
        run: |
          TIMEOUT=600  # Increased to 10 minutes
          INTERVAL=20
          EXPECTED_URL="https://zsoftly.github.io/zsoftly-services/"
          echo "Verifying deployment at $EXPECTED_URL"
          START_TIME=$(date +%s)
          while :; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$EXPECTED_URL")
            if [ "$STATUS" = "200" ]; then
              echo "✅ Deployment verified successfully (HTTP $STATUS)"
              DEPLOYMENT_STATUS="success"
              break
            fi
            CURRENT_TIME=$(date +%s)
            ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
            if [ $ELAPSED_TIME -gt $TIMEOUT ]; then
              echo "❌ Deployment verification timed out after $TIMEOUT seconds (HTTP $STATUS)"
              echo "This may be normal for the first deployment - please check the URL manually in a few minutes"
              DEPLOYMENT_STATUS="pending"
              break
            fi
            echo "Waiting for deployment to become available (HTTP $STATUS)... $ELAPSED_TIME seconds elapsed"
            sleep $INTERVAL
          done
          echo "DEPLOYMENT_STATUS=$DEPLOYMENT_STATUS" >> $GITHUB_ENV

      - name: Send Google Chat notification on success
        if: github.ref == 'refs/heads/main'
        env:
          ENCODED_WEBHOOK_URL: ${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}
        run: |
          if [ -z "$ENCODED_WEBHOOK_URL" ]; then
            echo "❌ GOOGLE_CHAT_WEBHOOK_URL secret is not set. Skipping notification."
            exit 0
          fi
          
          # Decode the base64 encoded webhook URL
          WEBHOOK_URL=$(echo "$ENCODED_WEBHOOK_URL" | base64 -d)
          
          # Verify the webhook URL was decoded successfully
          if [ -z "$WEBHOOK_URL" ]; then
            echo "❌ Failed to decode the webhook URL. Please check that it's properly base64 encoded."
            exit 0
          fi
          
          # Test the webhook with a simple request
          TEST_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
            -H "Content-Type: application/json" \
            -d '{"text": "Webhook test"}' \
            "$WEBHOOK_URL")
            
          if [ "$TEST_RESPONSE" != "200" ]; then
            echo "❌ Webhook test failed with status $TEST_RESPONSE. Skipping notification."
            exit 0
          fi
          
          # Determine message based on deployment status
          DEPLOY_MESSAGE="is being deployed"
          if [ "$DEPLOYMENT_STATUS" = "success" ]; then
            DEPLOY_MESSAGE="has been successfully deployed"
          fi
          
          # Send notification
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
            -H "Content-Type: application/json" \
            -d "{\"text\": \"✅ **Documentation Update**\n\nThe ZSoftly documentation $DEPLOY_MESSAGE to GitHub Pages.\n\n**Repository**: ${{ github.repository }}\n**URL**: https://zsoftly.github.io/zsoftly-services/\n**Action**: [View workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\"}" \
            "$WEBHOOK_URL")
          
          if [ "$RESPONSE" = "200" ]; then
            echo "✅ Google Chat notification sent successfully"
          else
            echo "❌ Google Chat notification failed with status $RESPONSE"
          fi